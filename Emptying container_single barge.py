# -*- coding: utf-8 -*-
"""
Created on Thu Nov  2 14:23:46 2023

@author: jvoor
"""
import csv
import math

# Define constants
total_volume = 44281        # Total dredging volume in m^3
extraction_bucket = 10      # Volume of the BHD bucket in m^3
barge_capacity = 1000       # Barge capacity in m^3
extraction_time = 90        # Cycle time for filling and emptying bucket + swinging action in seconds
sailing_speed_full =  4.115 # Full sailing speed in m/s
sailing_speed_empty = 5.14  # Empty sailing speed in m/s
oh_week = 100               #Operational hours per week
exec_period = 10            #Project execution period in weeks
#emptying time of split barges
time_to_empty = 10*60
loading_time = extraction_time * (barge_capacity / extraction_bucket)  #Loading time of the barge in seconds


#Define coordinates of sailing route for barges in EPSG:4326
start_lat = 17.61373393
start_lon = -63.24042984
intermediate_lat = 17.6148190
intermediate_lon = -63.2614226
end_lat = 17.653580430
end_lon = -63.269899024






# Function with Haversine formula for calculating distances for sailing
def sailing_dist(lat1, lon1, lat2, lon2):
    earth_radius = 6371000  # Approximate value for Earth's mean radius

    # Convert latitude and longitude from degrees to radians
    lat1 = math.radians(lat1)
    lon1 = math.radians(lon1)
    lat2 = math.radians(lat2)
    lon2 = math.radians(lon2)

    # Haversine formula
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance = earth_radius * c
    return distance

# Calculate the distance from the starting point to the intermediate point
distance_to_intermediate = sailing_dist(start_lat, start_lon, intermediate_lat, intermediate_lon)

# Calculate the distance from the intermediate point to the ending point
distance_to_end = sailing_dist(intermediate_lat, intermediate_lon, end_lat, end_lon)

# Calculate total sailing time based on the distances and sailing speed + unloading time of the barge
total_sailing_time = ((distance_to_intermediate + distance_to_end) / sailing_speed_full) + ((distance_to_intermediate + distance_to_end) / sailing_speed_empty) + time_to_empty

#####################################################################################################################

# Input for source term calculation
rho_w = 1025                        #Water density in [kg/m3]
rho_s = 2700                        #Grain density in [kg/m3]
rho_d = 1620                        #Dry density
n = 0.4                             #Porosity
rho_situ = rho_d + rho_w*n          #In-situ density
fine_perc = 0.04                    #Percentage of fines in the dredged sediment (grain size < 63 um is regarded as fines)

#Calculation for total dredging process
m_t = fine_perc*rho_d*total_volume  #Total mass of fines available in dredged sediment

sigma_b = 0.05                      #Bucket drip fraction including extra % for fines generated by boulder crushing
m_d = m_t * sigma_b                 #Mass of fines lost in water column

#Calculation for fines generated per barge fill
cycles_week = oh_week / ((loading_time + total_sailing_time) / 3600)
P_Situ = total_volume / (exec_period * loading_time * cycles_week)
m_t_cycle = P_Situ * rho_d * loading_time * fine_perc

m_d_cycle = m_t_cycle * sigma_b #Fines released per filled barge in kg

#Calculation of source term in kg/s
source_term = m_d_cycle / loading_time

############## WERK AAN SOURCE TERM MET VERSCHILLENDE FINES
"Eventueel lijst maken met 1 id kolom, 1 volume kolom en 1 kolom met fine percentages per volumelaag"




# Print the total sailing time in seconds
print(f"Total sailing time for a full barge: {total_sailing_time:.2f} seconds")

#Create .csv file for adding the source term per BHD cycle
# with open('sediment_flux.csv', 'w', newline='') as csvfile:
#     fieldnames = ['Time', 'Source term [kg/s]']
#     writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
#     writer.writeheader()

#Create .txt file for adding source term
with open('sediment_flux.txt', 'w') as txtfile:
    txtfile.write("Time [s]\tSource term [kg/s]\n")
    
    #start variables for barge1
    barge_fill_count = 0
    barge_fill = 0
    total_run_time = 0
    sailing = False  # Flag to indicate whether the barge is sailing
    sailing_start_time = None  # The time when sailing started
    sail_count = 0  # Initialize the sail count
    
    #start variables for barge2
    barge2_fill_count = 0
    barge2_fill = 0
    sailing2 = False
    sailing_start_time2 = None
    sail_count2 = 0
    
#THIS WORKS FOR 1 BARGE###
    #Start the loop
    while total_volume > 0:
        while total_volume > 0 and barge_fill < barge_capacity:
        #while barge_fill < barge_capacity:
            # Determine the extraction amount either bucket amount or amount left < bucket size
            extraction_amount = min(extraction_bucket, total_volume)

            # Update current volume
            total_volume -= extraction_amount
            barge_fill += extraction_amount
            total_run_time += extraction_time
            # print(total_run_time)
    
            # Add the sediment flux to the CSV file or the .txt file
            #writer.writerow({'Time': total_run_time, 'Source term [kg/s]': sediment_flux})
            txtfile.write(f"{total_run_time}\t{source_term}\n")
    
        # Check for full barge and add full barge count
        barge_fill_count += 1
        # total_run_time += extraction_time * barge_capacity/extraction_amount
        # Record the time when sailing starts
        sailing_start_time = total_run_time
        if barge_fill >= barge_capacity:
            sailing = True
        # while total_run_time - sailing_start_time < sail_time:
        while sailing == True:
            # Add any logic related to sailing here
            # For example, update the barge's location or status during sailing
            total_run_time += total_sailing_time  # Increment the time
            #print(total_run_time/3600)
            sail_count += 1
        
            if sail_count >= 1:
                sailing = False
        # Reset barge fill to 0 after sailing
        sail_count = 0
        barge_fill = 0

############################################
#2nd barge still to be included
"ideas for including second barge:"
"- make use of sailing==True option when barge is full. How to make a distinction between the two barges then."
"Examples included have not represented the correct cycling times or only used barge2 one time"

#dredging of multiple different sediment layers with different fines content still to be included

# Print a summary
print(f"Extraction complete. Barge 1 filled {barge_fill_count} times.")
print(f"Total run time: {total_run_time / 60 / 60} hours")
